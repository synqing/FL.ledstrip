#include <Arduino.h>
#include <FastLED.h>
#include <SPIFFS.h>
#include "config/hardware_config.h"
#include "config/features.h"
#include "core/FxEngine.h"
#include "core/PaletteManager.h"
#include "hardware/PerformanceMonitor.h"
#include "utils/SerialMenu.h"
#include "utils/StripMapper.h"
#include "effects/EffectRegistry.h"


#if FEATURE_NETWORK
#include <WiFi.h>
#include "config/network_config.h"
#include "network/WebServer.h"
#endif

#if FEATURE_HARDWARE_OPTIMIZATION
#include "hardware/HardwareOptimizer.h"
#endif


// Global instances
FxEngine fxEngine;
PaletteManager paletteManager;
SerialMenu serialMenu;
PerformanceMonitor perfMon;
StripMapper stripMapper;

#if FEATURE_HARDWARE_OPTIMIZATION
HardwareOptimizer hwOptimizer;
#endif

#if FEATURE_NETWORK
WebServer webServer;
#endif

// Control variables
uint32_t nextButtonPress = 0;
bool settingsUpdated = false;

// Function declarations
void initializeHardware();
void initializeSystems();
void handleButtonPress();

void setup() {
    Serial.begin(115200);
    
    // Wait for USB CDC to be ready
    #ifdef ARDUINO_USB_CDC_ON_BOOT
    delay(1000);  // Give USB CDC time to initialize
    #endif
    
    // Wait for serial connection when debugging
    #if CORE_DEBUG_LEVEL >= 2
    while (!Serial && millis() < 5000) {
        delay(100);
    }
    #endif
    
    delay(1000);  // Additional delay for stability
    
    Serial.println(F("\n[INFO] --- Light Crystals Starting ---"));
    Serial.println(F("[INFO] Compiled: " __DATE__ " " __TIME__));
    Serial.println(F("[INFO] USB Port: /dev/cu.usbmodem1101"));
    
    // Initialize hardware first
    initializeHardware();
    
    // Initialize all systems
    initializeSystems();
    
    Serial.println(F("[INFO] --- Light Crystals Ready ---"));
    FastLED.show();
}

void loop() {
    // Start performance monitoring
    perfMon.startFrame();
    
    #if FEATURE_SERIAL_MENU
    // Monitor serial processing time
    perfMon.startSection();
    serialMenu.update();
    perfMon.endSerialProcessing();
    #endif
    
    #if FEATURE_NETWORK
    webServer.handleClients();
    #endif
    
    #if FEATURE_BUTTON_CONTROL
    handleButtonPress();
    #endif
    
    // Update palette blending
    paletteManager.updatePaletteBlending();
    
    // Update global palette reference for effects
    currentPalette = paletteManager.getCurrentPalette();
    
    // Monitor effect processing time
    perfMon.startSection();
    fxEngine.render();
    perfMon.endEffectProcessing();
    
    #if FEATURE_HARDWARE_OPTIMIZATION
    hwOptimizer.updatePerformanceMetrics();
    #endif
    
    // Performance reporting
    static uint32_t lastCompactLog = 0;
    static uint32_t lastDetailedLog = 0;
    
    #if FEATURE_PERFORMANCE_MONITOR
    // Compact status every 2 seconds
    if (millis() - lastCompactLog > 2000) {
        perfMon.printCompactStatus();
        lastCompactLog = millis();
    }
    
    // Detailed report every 30 seconds
    if (millis() - lastDetailedLog > 30000) {
        perfMon.printDetailedReport();
        lastDetailedLog = millis();
    }
    #endif
    
    // Monitor FastLED.show() time
    perfMon.startSection();
    FastLED.show();
    perfMon.endFastLEDShow();
    
    // End frame timing
    perfMon.endFrame();
    
    // Frame rate limiting
    delay(1000 / HardwareConfig::DEFAULT_FPS);
}

void initializeHardware() {
    // Initialize power pin
    pinMode(POWER_PIN, OUTPUT);
    digitalWrite(POWER_PIN, HIGH);
    
    // Initialize button
    #if FEATURE_BUTTON_CONTROL
    pinMode(BUTTON_PIN, INPUT_PULLUP);
    #endif
    
    // Initialize SPIFFS
    if (!SPIFFS.begin(true)) {
        Serial.println(F("[ERR] SPIFFS Mount Failed!"));
    } else {
        Serial.println(F("[INFO] SPIFFS Mounted."));
    }
    
    #if FEATURE_HARDWARE_OPTIMIZATION
    // Initialize hardware optimizations BEFORE FastLED
    hwOptimizer.initializeOptimizations();
    #endif
    
    // Initialize FastLED
    Serial.println(F("[INFO] Initializing FastLED..."));
    FastLED.addLeds<WS2812, HardwareConfig::LED_DATA_PIN, GRB>(
        leds, HardwareConfig::NUM_LEDS
    ).setCorrection(TypicalLEDStrip);
    
    FastLED.setBrightness(DEFAULT_BRIGHTNESS);
    FastLED.clear(true);
    
    #if FEATURE_FASTLED_OPTIMIZATION
    hwOptimizer.configureFastLEDAdvanced();
    #endif
    
    Serial.println(F("[INFO] FastLED Initialized."));
}

void initializeSystems() {
    // Initialize strip mapping
    stripMapper.initializeMapping();
    
    // Initialize palette manager
    paletteManager.begin();
    
    // Register all effects with FxEngine
    Serial.println(F("[INFO] Registering effects..."));
    EffectRegistry::registerAllEffects(fxEngine);
    Serial.print(F("[INFO] Registered "));
    Serial.print(fxEngine.getNumEffects());
    Serial.println(F(" effects."));
    
    #if FEATURE_SERIAL_MENU
    // Initialize serial menu
    serialMenu.begin();
    #endif
    
    #if FEATURE_PERFORMANCE_MONITOR
    // Initialize performance monitor
    perfMon.begin(HardwareConfig::DEFAULT_FPS);
    #endif
    
    #if FEATURE_NETWORK
    // Initialize network services
    webServer.begin();
    #endif
}

#if FEATURE_BUTTON_CONTROL
void handleButtonPress() {
    if (digitalRead(BUTTON_PIN) == LOW) {
        if (millis() - nextButtonPress > 500) {
            nextButtonPress = millis();
            
            // Cycle through transition types
            static uint8_t transitionType = 0;
            transitionType = (transitionType + 1) % 3;
            
            fxEngine.nextEffect(transitionType, 800); // 800ms transition
            
            #if FEATURE_DEBUG_OUTPUT
            Serial.print(F("[BTN] Effect: "));
            Serial.print(fxEngine.getCurrentEffectName());
            Serial.print(F(", Transition: "));
            Serial.println(transitionType);
            #endif
            
            settingsUpdated = true;
            
            #if FEATURE_NETWORK
            webServer.notifyClients();
            #endif
        }
    }
}
#endif